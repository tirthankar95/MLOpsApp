
name : Deploy to Amazon ECS

on : 
    push :
        branches :
            - main
        


env:
  AWS_REGION: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: flask_app           # set this to your Amazon ECR repository name
  ECS_SERVICE: flask_app_service                 # set this to your Amazon ECS service name
  ECS_CLUSTER:  default                  # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: flask_app           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition


jobs :
    job1: ## CI Pipeline 
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          - name: Install Python 3
            uses: actions/setup-python@v1
            with:
              python-version: 3.12
          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              pip install pytest
              pip install -r requirements.txt
          - name: Run tests with pytest
            run: pytest 
    
    job2:
        needs: job1
        runs-on: ubuntu-latest
        environment : production

        steps : 
            -name : Checkout 
            uses : actions/checkout@v4

            - name : configure aws credentials
            uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
            with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

            -name : Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

            - name: Build, tag, and push image to Amazon ECR
            id: build-image
            env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: ${{ github.sha }}

            run: |
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
            
            
            - name: Fill in the new image ID in the Amazon ECS task definition
            id: task-def
            uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
            with:
                task-definition: ${{ env.ECS_TASK_DEFINITION }}
                container-name: ${{ env.CONTAINER_NAME }}
                image: ${{ steps.build-image.outputs.image }}

            - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v2
            with:
                task-definition: ${{ steps.task-def.outputs.task-definition }}
                service: ${{ env.ECS_SERVICE }}
                cluster: ${{ env.ECS_CLUSTER }}
                wait-for-service-stability: true